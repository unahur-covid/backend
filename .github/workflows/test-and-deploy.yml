name: Test and deploy

on:
  push:
    tags:
      - '*'
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        ports:
          - 5432:5432
        image: postgres:12.5-alpine
        env:
          POSTGRES_DB: turnos_test
          POSTGRES_USER: turnos
          POSTGRES_PASSWORD: turnos1234
    env:
      NODE_ENV: test
      SQL_USERNAME: turnos
      SQL_PASSWORD: turnos1234
      SQL_TEST_DATABASE: turnos_test
    steps:
      - uses: actions/checkout@v2
      - id: nvmrc
        uses: browniebroke/read-nvmrc-action@v1
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: '${{ steps.nvmrc.outputs.node_version }}'
      - run: npm ci
      - run: npm run db:init
      - run: npm run lint
      - run: npm test
  notify:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() }} # You always want to be notified: success, failure, or cancelled
    steps:
      - name: Notify
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.github_token }}
          discord-webhook: ${{ secrets.DISCORD_DESARROLLO_URL }}
  deploy-pruebas:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: unahur-covid-api
          heroku_email: federico.aloi@gmail.com
  deploy-produccion:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.TURNOS_SSH_KEY }}
          known_hosts: ${{ secrets.TURNOS_SSH_KNOWN_HOSTS }}
      - name: Push changes to production server
        run: |
          git fetch --unshallow origin
          git remote set-url --push origin ${{ secrets.PRODUCTION_REPOSITORY_URL }}
          git push -f origin HEAD:master
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      - name: Notify release on Discord
        run: ./bin/notificar-deploy.sh ${{ steps.get_version.outputs.VERSION }} ${{ secrets.DISCORD_WEBHOOK_URL }} unahur-turnos/backend
